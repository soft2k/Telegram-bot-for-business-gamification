import asyncio
import random
import os
from aiogram.types import Message
from typing import List
from aiogram import Bot, Dispatcher, types,Router,F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
import aiogram 
from aiogram.types import InlineKeyboardButton,InlineKeyboardMarkup,CallbackQuery,FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import re
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger
from sqlalchemy.future import select
from sqlalchemy import select,desc,and_
from app.database.models import async_session
from app.database.models import User,Task,Shop,Confirm,Achievement
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.orm import sessionmaker, declarative_base
import app.database.models as md
import app.database.requests as rq
import app.keybord as kb
import app.root as rt
from functools import wraps

router = Router()


def is_test():
    def decorator(func):
        @wraps(func)
        async def wrapper(callback: CallbackQuery, *args, **kwargs):
            async with async_session() as session:
                result = await session.execute(
                    select(User).where(User.tg_id == callback.from_user.id)
                )
                user = result.scalar_one_or_none()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
                if user is None or (user.tg_id != 195170570 and user.tg_id != 1249342160):
                    await callback.answer("‚ö†Ô∏è–°–µ–π—á–∞—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ‚ö†Ô∏è")
                    return
            return await func(callback, *args, **kwargs)
        return wrapper
    return decorator


main_text = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!\n\n"
    "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∏ –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
    "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
    "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ, —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!\n"
    "üìù –ó–∞–¥–∞–Ω–∏–µ\n"
    "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Ö, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏–Ω—Ç—ã –∏ –Ω–∞–≥—Ä–∞–¥—ã!\n"
    "üèÜ –ê—á–∏–≤–∫–∏\n"
    "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å!\n"
    "üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥\n"
    "–°—Ä–∞–≤–Ω–∏—Ç–µ —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ —É–∑–Ω–∞–π—Ç–µ, –∫—Ç–æ –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ!\n"
    "üõí –ú–∞–≥–∞–∑–∏–Ω\n"
    "–ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–∏ –ø–æ–∏–Ω—Ç—ã –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è!\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!"
)

class ConfrimDay(StatesGroup):
    waiting_for_confrim = State

class RegisterStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_phone_referals = State()
    waiting_for_channel_subscription = State()


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    async with async_session() as session:
       
        result = await session.execute(
            select(User).where(User.tg_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            await message.answer(main_text,reply_markup=kb.keybord_main)
        else:
            await message.answer(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:\n"
    "–ü—Ä–æ—Å–∏–º –Ω–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º—ã, —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞—á–∏–≤–æ–∫.\n"
    "–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω."
)
            await state.set_state(RegisterStates.waiting_for_name)

@router.message(RegisterStates.waiting_for_name)
async def cmd_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        text='–¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º',
        reply_markup=kb.phone_kb
    )
    await state.set_state(RegisterStates.waiting_for_phone)

@router.message(RegisterStates.waiting_for_phone)
async def cmd_phone(message: types.Message, state: FSMContext):
    if message.contact:  
        phone = message.contact.phone_number
    else: 
        phone = message.text


    def normalize_phone(phone):
        phone = re.sub(r'\D', '', phone)
      
        if phone.startswith('8'):
            phone = '7' + phone[1:]
        
     
        if not phone.startswith('7'):
            phone = '7' + phone
        

        return '+' + phone


    normalized_phone = normalize_phone(phone)


    if len(normalized_phone) != 12:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.")
        return

    await state.update_data(phone=normalized_phone)

    try:
        await message.answer(
           text = (
    "‚ú® –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –∫ –Ω–∞–º! ‚ú®\n"
    "üéâ –ü–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞ –Ω–∞ –°—Ö–æ–¥–∫—É –º—ã –Ω–∞—á–∏—Å–ª–∏–º –≤–∞–º 200 –±–æ–Ω—É—Å–æ–≤! üéâ\n"
    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX"
),
            reply_markup=kb.referals
        )
        await state.set_state(RegisterStates.waiting_for_phone_referals)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(RegisterStates.waiting_for_phone_referals)
async def processing_registr(message: types.Message, state: FSMContext, bot: Bot):
    referral_phone = message.text.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    state_data = await state.get_data()
    name = state_data.get('name')
    phone = state_data.get('phone')  

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7
    if referral_phone.startswith('7'):
        referral_phone = '+7' + referral_phone[1:]  # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É 7 –Ω–∞ +7
    elif referral_phone.startswith('8'):
        referral_phone = '+7' + referral_phone[1:]  # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É 8 –Ω–∞ +7
    elif not referral_phone.startswith('+'):
        referral_phone = '+7' + referral_phone  # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +, –¥–æ–±–∞–≤–ª—è–µ–º +7

    async with async_session() as session:
        try:
            new_user = User(
                tg_id=message.from_user.id,
                name=name,
                phone=phone,
                phoneReferral=referral_phone  
            )
            session.add(new_user)
            
            if referral_phone:
                referral = await session.scalar(
                    select(User).where(User.phone == referral_phone)
                )
                user = await session.scalar(
                    select(User).where(User.tg_id == new_user.tg_id)
                )

                if referral:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ referral –Ω–∞ 1
                    user.referral += 1
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—É
                    await bot.send_message(
                        chat_id=referral.tg_id,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –µ—Å—Ç—å tg_id
                        text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ –≤–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∏–∑–∏—Ç–µ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 200 –æ—á–∫–æ–≤."
                    )
            
            await session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
            await state.set_state(RegisterStates.waiting_for_channel_subscription)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
                [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_subscription")]
            ])
            await message.answer(
                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª @shodka_tmn –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.",
                reply_markup=keyboard
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}") 
            await session.rollback()
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            await state.clear()

@router.callback_query(lambda c: c.data in ["check_subscription", "skip_subscription"])
async def process_subscription(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback_query.data == "check_subscription":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        chat_member = await bot.get_chat_member(chat_id='@shodka_tmn', user_id=callback_query.from_user.id)
        
        if chat_member.status in ['member', 'administrator', 'creator']:
            async with async_session() as session:
                try:
                    user = await session.scalar(
                        select(User).where(User.tg_id == callback_query.from_user.id)
                    )
                    if user:
                        user.point += 10
                        user.all_point += 10
                        await session.commit()
                    
                    await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –∏ –ø–æ–ª—É—á–∏–ª–∏ 10 –æ—á–∫–æ–≤!")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤: {e}")
                    await session.rollback()
                    await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
                [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_subscription")]
            ])
            await callback_query.message.edit_text(
                "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' —Å–Ω–æ–≤–∞. @shodka_tmn",
                reply_markup=keyboard
            )
            return

    else:
        await callback_query.answer("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É.")

    await state.clear()
    await callback_query.message.edit_text(
        main_text,
        reply_markup=kb.keybord_main
    )


@router.callback_query(F.data == 'back_to_main')
async def back_to_main_menu(callback: types.CallbackQuery):
    # Option 1: Delete the previous message if necessary
    await callback.message.delete()  # Delete the previous message

    # Send a new message with the main menu
    await callback.message.answer(main_text, reply_markup=kb.keybord_main)

    
#–•–µ–Ω–¥–ª–µ—Ä—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.callback_query(F.data == 'my_profile')
async def my_profile(callback: CallbackQuery):
    user_info = await rq.profile(callback.from_user.id)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton(text="–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="my_achievements")],
        [kb.back_to_main.inline_keyboard[0][0]]  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    ]

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    profile_text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"–¢–≤–æ–π ID: {user_info['id']}\n"
        f"–ò–º—è: {user_info['name']}\n"
        f"–°—Ç–∞—Ç—É—Å:{user_info['status']}\n"
        f"–ë–∞–ª–∞–Ω—Å –ø–æ–∏–Ω—Ç–æ–≤: {user_info['points']}\n"
        f"–í—Å–µ–≥–æ –ø–æ–∏–Ω—Ç–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user_info['all_point']}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: {user_info['tasks']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {user_info['level']}\n"
        f"–ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: {user_info['visit']}\n"
    )

    await callback.message.answer(
        profile_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

class ReviewStates(StatesGroup):
    waiting_for_review = State()

#–û—Ç–∑—ã–≤



@router.callback_query(F.data == 'review')
async def process_review(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìù –ú—ã —Ö–æ—Ç–∏–º —É—Å–ª—ã—à–∞—Ç—å –≤–∞—Å!\n"
                                    "–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å. –í–∞—à–∏ –º—ã—Å–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.\n"
                                    "‚úâÔ∏è –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç. –í–∞—à –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä—è–º–æ –±–æ—Å—Å—É, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —É—á—Ç–µ–º!\n"
                                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è! üôè",reply_markup=kb.back_to_main)
    await state.set_state(ReviewStates.waiting_for_review)    

@router.message(ReviewStates.waiting_for_review)
async def handle_review(message: Message, state: FSMContext):
    async with async_session() as session:
        try:
            result = await session.execute(
                select(User).where(User.tg_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.bot.send_message(
                chat_id=1249342160, 
                text=f"üåü –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n\n"
                     f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.name}\n"
                     f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}\n\n"
                     f"–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:\n"
                     f"{message.text}"
            )
            await message.bot.send_message(
                chat_id=195170570, 
                text=f"üåü –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n\n"
                     f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.name}\n"
                     f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}\n\n"
                     f"–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:\n"
                     f"{message.text}"
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
            await message.answer(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –∏–∑—É—á–∏–º.", 
                reply_markup=kb.back_to_main
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
        
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                reply_markup=kb.back_to_main
            )
            await state.clear()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞: {e}")           




@router.callback_query(F.data == 'my_achievements')
async def my_achievements(callback: CallbackQuery):
    async with async_session() as session:
        user = await session.execute(
            select(User).where(User.tg_id == callback.from_user.id)
        )
        user = user.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        

       

      
        achievements = await session.execute(
            select(Achievement).where(Achievement.id.in_(user.completed_tasks))
        )
        achievements = achievements.scalars().all()
        
        keyboard = []  
        
        if not achievements:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."
        else:
            text = "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
            for achievement in achievements:
                text += f"{achievement.id} | {achievement.name}: {achievement.description}\n"
                text += f"–û—á–∫–∏: {achievement.points}\n\n"
                keyboard.append([InlineKeyboardButton(text=f"{achievement.id}", callback_data=f"achievement_info_{achievement.id}")])
        
        keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")])

        
        try:
            await callback.message.delete()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        
        await callback.message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        

@router.callback_query(F.data.startswith('achievement_info_'))
async def show_achievement_details(callback: CallbackQuery):
    achievement_id = int(callback.data.split('_')[-1])
    async with async_session() as session:
        result = await session.execute(
            select(Achievement).where(Achievement.id == achievement_id)
        )
        achievement = result.scalar_one_or_none()
        
        if achievement:
            keyboard = [
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å",
                        callback_data="my_profile"
                    )
                ]
            ]
            
            text = f"üèÜ –ê—á–∏–≤–∫–∞: {achievement.name}\n"
            text += f"üìë –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {achievement.category_id}\n"
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {achievement.description}\n"
            text += f"üíé –ü–æ–∏–Ω—Ç—ã: {achievement.points}"
            
            if achievement.photo:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try:
                    await callback.message.delete()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                await callback.message.answer_photo(
                    photo=achievement.photo,
                    caption=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )
            else:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try:
                    await callback.message.delete()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                await callback.message.answer(
                    text=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )



@router.callback_query(F.data == 'task_')
async def my_profile(callback: CallbackQuery):
    keybord = InlineKeyboardMarkup(inline_keyboard=kb.task)
    await callback.message.edit_text("–ú–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –∑–∞–¥–∞–Ω–∏–π! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏–Ω—Ç—ã –∏ –¥–æ—Å—Ç–∏—á—å –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç!\n\n"
        "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è - –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∏ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∏–Ω—Ç—ã!\n"
        "üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è - –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏. –ó–∞ —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n"
        "üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è - –°–∞–º—ã–µ –º–∞—Å—à—Ç–∞–±–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Ä–∞–∑ –≤ –º–µ—Å—è—Ü. –£—Å–ø–µ–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–∏–Ω—Ç—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!",reply_markup=keybord)




async def get_tasks():
    async with async_session() as session:
        result = await session.execute(select(Task).where(Task.id == 1))
        tasks = result.scalars().all()
        return tasks


@router.callback_query(F.data == "task_1")
async def show_tasks(callback: CallbackQuery):
    await display_tasks(callback, category_id=1)

@router.callback_query(F.data == "task_7")
async def show_tasks(callback: CallbackQuery):
    await display_tasks(callback, category_id=7)

@router.callback_query(F.data == "task_30")
async def show_tasks(callback: CallbackQuery):
    await display_tasks(callback, category_id=30)

async def display_tasks(callback: CallbackQuery, category_id: int):
    async with async_session() as session:
        query = select(Task).where(Task.category_id == category_id)
        result = await session.execute(query)
        tasks = result.scalars().all()

        if not tasks:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
        tasks_text = "\n".join(f"{task.id}. {task.description} ({task.point} –±–∞–ª–ª–æ–≤)" for task in tasks)

        task_buttons = []
        for task in tasks:
            button = InlineKeyboardButton(
                text=f"–ó–∞–¥–∞–Ω–∏–µ {task.id}",
                callback_data=f"do_task_{task.id}"
            )
            task_buttons.append([button])

        back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
        task_buttons.append([back_button])

        keyboard = InlineKeyboardMarkup(inline_keyboard=task_buttons)

        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{tasks_text}", reply_markup=keyboard)

@router.callback_query(F.data.startswith("do_task_"))
async def process_task(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
     
    
    async with async_session() as session:
        
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar_one_or_none()
        result2 = await session.execute(
            select(Task).where(Task.id == task_id)
        )
        task = result2.scalar_one_or_none()
        if task:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            existing_confirm = await session.execute(
                select(Confirm).where(
                    and_(
                        Confirm.tg_id == user_id,
                        Confirm.description == task.description
                    )
                )
            )
            if existing_confirm.scalar_one_or_none():
                await callback.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!", show_alert=True)
                return
        new_confirm = Confirm(
            tg_id=user_id,
            name=user.name,
            description=task.description,
            points=task.point,
            category='–ó–∞–¥–∞–Ω–∏–µ',          
        )
        session.add(new_confirm)
        await session.commit()
        

        await callback.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)


@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    keybord = InlineKeyboardMarkup(inline_keyboard=kb.task)
    await callback.message.edit_text("*–ú–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π*\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –∑–∞–¥–∞–Ω–∏–π! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏–Ω—Ç—ã –∏ –¥–æ—Å—Ç–∏—á—å –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç!\n\n"
        "üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è* - –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∏ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∏–Ω—Ç—ã!\n"
        "üìÜ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è* - –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏. –ó–∞ —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n"
        "üìÖ *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è* - –°–∞–º—ã–µ –º–∞—Å—à—Ç–∞–±–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Ä–∞–∑ –≤ –º–µ—Å—è—Ü. –£—Å–ø–µ–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
        "‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–∏–Ω—Ç—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!*",reply_markup=keybord)



@router.callback_query(F.data.startswith("task_"))
async def process_task_selection(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[1])
    
    async with async_session() as session:
       
        result = await session.execute(select(Task).filter(Task.id == task_id))
        task = result.scalar_one_or_none()
        
        user_result = await session.execute(
            select(User).filter(User.tg_id == callback_query.from_user.id)
        )
        user = user_result.scalar_one_or_none()
        
        if task and user:
            task_description = task.description
            task_point = task.point
            new_confirm = Confirm(
                tg_id=callback_query.from_user.id,
                name=user.name, 
                description=task_description,
                points=task_point
            )
            session.add(new_confirm)
            await session.commit()

            await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ: {task_description}")
            await callback_query.message.answer(f"–ó–∞–¥–∞–Ω–∏–µ '{task_description}' ({task_point} points) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            await callback_query.answer("–ó–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


@router.callback_query(F.data == 'liderboard_')
async def show_top_users(callback: CallbackQuery):
    async with async_session() as session:
        result = await session.execute(select(User).order_by(desc(User.all_point)).limit(10))
        users = result.scalars().all()
        if users:
            response = '–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º:\n\n'
            for i, user in enumerate(users, start=1):
                response += f"{i} | {user.name} | {user.all_point} –æ—á–∫–æ–≤\n"
            await callback.message.edit_text(response,reply_markup=kb.back_to_main)
        else:
            await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")



#–ú–∞–≥–∞–∑–∏–Ω
@router.callback_query(F.data == 'sale_')
async def show_shop(callback: CallbackQuery):
    async with async_session() as session:
        result = await session.execute(select(Shop))
        shops = result.scalars().all()

    if not shops:
        await callback.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è –Ω–∏—á–µ–≥–æ –∫—É–ø–∏—Ç—å.")
        return

    builder = InlineKeyboardBuilder()
    

    for shop in shops:
        builder.button(text=f"{shop.description} | {shop.points}", callback_data=f"shop_{shop.id}")


    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")

    builder.adjust(1)  
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("shop_"))
async def process_shop_purchase(callback: types.CallbackQuery):
    shop_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    async with async_session() as session:
        async with session.begin():
            shop_item = await session.execute(select(Shop).where(Shop.id == shop_id))
            shop_item = shop_item.scalar_one_or_none()

            if not shop_item:
                await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            user = await session.execute(select(User).where(User.tg_id == user_id))
            user = user.scalar_one_or_none()

            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            if user.point >= shop_item.points:
                user.point -= shop_item.points
            
                await callback.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {shop_item.description}!\n"
                                              "–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ê–¥–º–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!")
                
                await callback.answer()
            else:
                await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")

   
        
#–ê—á–∏–≤–∫–∏

@router.callback_query(F.data == 'ach_')
async def show_tasks(callback: types.CallbackQuery):
    keybord = await rq.get_categories_keyboard()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',reply_markup=keybord)

@router.callback_query(F.data.startswith("category_"))
async def show_achievements(callback: CallbackQuery):
    category_id = str(callback.data.split("_")[1])
    async with async_session() as session:
        result = await session.execute(
            select(Achievement).where(Achievement.category_id == category_id)
        )
        achievements = result.scalars().all()
        
        keyboard = []
        row = []
        for ach in achievements:
            row.append(InlineKeyboardButton(
                text=ach.name,
                callback_data=f"achievement_{ach.id}"
            ))
            if len(row) == 2:
                keyboard.append(row)
                row = []
                
        if row: 
            keyboard.append(row)
            
        keyboard.append([
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="back_to_categories"
            )
        ])
        
        text = f"–ê—á–∏–≤–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}:"
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(text=text, reply_markup=markup)
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
        await callback.answer()


@router.callback_query(F.data.startswith("achievement_"))
async def show_achievement_details(callback: CallbackQuery):
    achievement_id = int(callback.data.split("_")[1])
    async with async_session() as session:
        result = await session.execute(
            select(Achievement).where(Achievement.id == achievement_id)
        )
        achievement = result.scalar_one_or_none()
        
        if achievement:
            keyboard = [[
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—á–∏–≤–∫–∞–º",
                    callback_data=f"category_{achievement.category_id}"
                )
            ],[InlineKeyboardButton(
                text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ!',
                callback_data = f"confirm_{achievement_id}"
            )]]
            
            text = f"üèÜ –ê—á–∏–≤–∫–∞: {achievement.name}\n"
            text += f"üìë –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {achievement.category_id}\n"
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {achievement.description}\n"
            text += f"üíé –ü–æ–∏–Ω—Ç—ã: {achievement.points}"
            
            if callback.message.photo:
                await callback.message.edit_caption(
                    caption=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )
            else:
                
                if achievement.photo:  
                    await callback.message.delete()
                    await callback.message.answer_photo(
                        photo=achievement.photo,
                        caption=text,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                    )
                else:
                    
                    await callback.message.edit_text(
                        text=text,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                    )
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery):
    keyboard = await rq.get_categories_keyboard()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await callback.message.delete()
    await callback.message.answer(text=text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_"))
async def confirm_achievement(callback: CallbackQuery):
    achievement_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
     
    
    async with async_session() as session:
        
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar_one_or_none()
        result2 = await session.execute(
            select(Achievement).where(Achievement.id == achievement_id)
        )
        achievement = result2.scalar_one_or_none()
        if achievement:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            existing_confirm = await session.execute(
                select(Confirm).where(
                    and_(
                        Confirm.tg_id == user_id,
                        Confirm.description == achievement.description,
                    )
                )
            )
            if existing_confirm.scalar_one_or_none():
                await callback.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!", show_alert=True)
                return
        new_confirm = Confirm(
            tg_id=user_id,
            task_id=achievement.id,
            name=user.name,
            description=achievement.description,
            points=achievement.points,
            category='–ê—á–∏–≤–∫–∞',          
        )
        session.add(new_confirm)
        await session.commit()
        

        await callback.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True,)
          

@router.callback_query(F.data.startswith("loyalty_"))
@is_test()
async def loyalty(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.delete()

    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    photo_path = r'photo\loyal.jpg'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if os.path.exists(photo_path):
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FSInputFile –∏–∑ —Ñ–∞–π–ª–∞
        photo = FSInputFile(photo_path)  # Use FSInputFile for file path
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        await callback.message.answer_photo(photo=photo, reply_markup=kb.back_to_main)
    else:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


