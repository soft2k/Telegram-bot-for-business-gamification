import asyncio
from typing import List
from aiogram import Bot, Dispatcher, types,Router,F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
 
from aiogram.types import InlineKeyboardButton,InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy import select,desc
from app.database.models import async_session
from app.database.models import User,Task,Shop,Confirm
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.orm import sessionmaker, declarative_base
import app.database.models as md
import app.database.requests as rq
import app.keybord as kb
import app.root as rt

router = Router()


class ConfrimDay(StatesGroup):
    waiting_for_confrim = State


@router.message(Command("start"))
async def send_welcome(message: types.Message):
    await rq.set_user(message.from_user.id, message.from_user.full_name)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—Ö–æ–¥–∫–∞–ë–æ—Ç!",reply_markup=kb.main)


@router.message(Command("root"))
async def check_root(message: types.Message):
    user = rq.set_user(message.from_user.id, message.from_user.full_name)
    has_access = await rq.check_root_id(message.from_user.id)
    if has_access:
        await message.answer("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",reply_markup=kb.root)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!",reply_markup=kb.main)

@router.message(F.text == '–ù–∞–∑–∞–¥')
async def send_welcome(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—Ö–æ–¥–∫–∞–ë–æ—Ç!",reply_markup=kb.main)


    
#–•–µ–Ω–¥–ª–µ—Ä—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.message(F.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def my_profile(message: types.Message):
    user_info = await rq.profile(message.from_user.id)

    await message.answer(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"–ò–º—è: {user_info['name']}\n"
            f"–ë–∞–ª–∞–Ω—Å: {user_info['points']}\n"
            f"–í—Å–µ–≥–æ –æ—á–∫–æ–≤: {user_info['all_point']}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: {user_info['tasks']}\n"
            f"–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {user_info['level']}\n"
           
             
              ,reply_markup=kb.main)


@router.message(F.text == '–ó–∞–¥–∞–Ω–∏–µ')
async def my_profile(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏–π',reply_markup=kb.task)

async def get_tasks():
    async with async_session() as session:
        result = await session.execute(select(Task).where(Task.id == 1))
        tasks = result.scalars().all()
        return tasks





@router.message(F.text == '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–µ')
async def show_tasks(message: types.Message):
    async with async_session() as session:
        
        # –ò–∑–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏—è —Å category_id = 1
        result = await session.execute(select(Task).where(Task.category_id == 1))
        tasks = result.scalars().all()

    builder = InlineKeyboardBuilder()
    for task in tasks:
        builder.button(text=f"{task.description} | {task.point}", callback_data=f"task_{task.id}")
    
    builder.adjust(1)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=builder.as_markup())

    if not task:
        await message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç')
        return

@router.message(F.text == '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–µ')
async def show_tasks(message: types.Message):
    async with async_session() as session:
        
        result = await session.execute(select(Task).where(Task.category_id == 7))
        tasks = result.scalars().all()


    if not tasks:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    builder = InlineKeyboardBuilder()
    for task in tasks:
        builder.button(text=f"{task.description} | {task.point}", callback_data=f"task_{task.id}")
    
    builder.adjust(1)  

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=builder.as_markup())


@router.message(F.text == '–ï–∂–µ–º–µ—Å–µ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–µ')
async def show_tasks(message: types.Message):
    async with async_session() as session:
        
        result = await session.execute(select(Task).where(Task.category_id == 30))
        tasks = result.scalars().all()


    if not tasks:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    builder = InlineKeyboardBuilder()
    for task in tasks:
        builder.button(text=f"{task.description} | {task.point}", callback_data=f"task_{task.id}")
    
    builder.adjust(1)  

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("task_"))
async def process_task_selection(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[1])
    
    async with async_session() as session:
        result = await session.execute(select(Task).filter(Task.id == task_id))
        task = result.scalar_one_or_none()
        
        if task:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ task
            task_description = task.description
            task_point = task.point

            new_confirm = Confirm(
                tg_id=callback_query.from_user.id,
                name=callback_query.from_user.username,
                description=task_description,
                points=task_point
            )
            session.add(new_confirm)
            await session.commit()

    if task:
        await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ: {task_description}")
        await callback_query.message.answer(f"–ó–∞–¥–∞–Ω–∏–µ '{task_description}' ({task_point} points) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    else:
        await callback_query.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")



@router.message(F.text == '–õ–∏–¥–µ—Ä–±–æ—Ä–¥')
async def show_top_users(message: types.Message):
    async with async_session() as session:
        result = await session.execute(select(User).order_by(desc(User.all_point)).limit(10))
        users = result.scalars().all()
        if users:
            response = '–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º:\n\n'
            for i, user in enumerate(users, start=1):
                response += f"{i} | {user.name} | {user.all_point} –æ—á–∫–æ–≤\n"
            await message.answer(response)
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

#–ú–∞–≥–∞–∑–∏–Ω

@router.message(F.text == '–ú–∞–≥–∞–∑–∏–Ω')
async def show_shop(message: types.Message):  
    async with async_session() as session:
        result = await session.execute(select(Shop))
        shops = result.scalars().all()
        if shops:
            response = ''
            for shop in shops:
                response += f" ‚Ññ {shop.id} | {shop.description} | –û—á–∫–∏: {shop.points}\n\n"
            await message.answer(response)
        else:
            await message.answer("–ö—É–ø–∏—Ç—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ–ª—å–∑—è((")

@router.message(F.text == '–ú–∞–≥–∞–∑–∏–Ω')
async def show_shop(message: types.Message):
    async with async_session() as session:
        
        result = await session.execute(select(Shop))
        shops = result.scalars().all()


    if not shops:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è –Ω–∏—á–µ–≥–æ –∫—É–ø–∏—Ç—å.")
        return

    builder = InlineKeyboardBuilder()
    for shop in shops:
        builder.button(text=f"{shop.description} | {shop.points}", callback_data=f"shop_{shop.id}")
    
    builder.adjust(1)  

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=builder.as_markup())
