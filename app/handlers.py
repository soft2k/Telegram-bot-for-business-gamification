import asyncio
from typing import List
from aiogram import Bot, Dispatcher, types,Router,F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
 
from sqlalchemy import select,desc
from app.database.models import async_session
from app.database.models import User,Task
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.orm import sessionmaker, declarative_base
import app.database.models as md
import app.database.requests as rq
import app.keybord as kb
import app.root as rt

router = Router()



@router.message(Command("start"))
async def send_welcome(message: types.Message):
    await rq.set_user(message.from_user.id, message.from_user.full_name)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—Ö–æ–¥–∫–∞–ë–æ—Ç!",reply_markup=kb.main)


@router.message(Command("root"))
async def check_root(message: types.Message):
    user = rq.set_user(message.from_user.id, message.from_user.full_name)
    has_access = await rq.check_root_id(message.from_user.id)
    if has_access:
        await message.answer("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",reply_markup=kb.root)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!",reply_markup=kb.main)

@router.message(F.text == '–ù–∞–∑–∞–¥')
async def send_welcome(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—Ö–æ–¥–∫–∞–ë–æ—Ç!",reply_markup=kb.main)


    
#–•–µ–Ω–¥–ª–µ—Ä—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.message(F.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def my_profile(message: types.Message):
    user_info = await rq.profile(message.from_user.id)

    await message.answer(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"–ò–º—è: {user_info['name']}\n"
            f"–ë–∞–ª–∞–Ω—Å: {user_info['points']}\n"
            f"–í—Å–µ–≥–æ –æ—á–∫–æ–≤: {user_info['all_point']}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: {user_info['tasks']}\n"
            f"–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {user_info['level']}\n"
           
             
              ,reply_markup=kb.main)


@router.message(F.text == '–ó–∞–¥–∞–Ω–∏–µ')
async def my_profile(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏–π',reply_markup=kb.task)

async def get_tasks():
    async with async_session() as session:
        result = await session.execute(select(Task).where(Task.id == 1))
        tasks = result.scalars().all()
        return tasks

@router.message(F.text == '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–µ')
async def show_tasks_day(message: types.Message):
    category_id = 1  
    async with async_session() as session:
        result = await session.execute(select(Task).where(Task.category_id == category_id))
        tasks = result.scalars().all()
        if tasks:
            response = ''
            for task in tasks:
                response += f" {task.description} | –û—á–∫–∏: {task.point}\n\n"
            await message.answer(response)
        else:
            await message.answer("–ó–∞–¥–∞—á—å –ø–æ–∫–∞ –Ω–µ—Ç.–ü—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ")


@router.message(F.text == '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–µ')
async def show_tasks_week(message: types.Message):
    category_id = 7  
    async with async_session() as session:
        result = await session.execute(select(Task).where(Task.category_id == category_id))
        tasks = result.scalars().all()
        if tasks:
            response = ''
            for task in tasks:
                response += f" {task.description} | –û—á–∫–∏: {task.point}\n\n"
            await message.answer(response)
        else:
            await message.answer("–ó–∞–¥–∞—á—å –ø–æ–∫–∞ –Ω–µ—Ç.–ü—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ")


@router.message(F.text == '–ï–∂–µ–º–µ—Å–µ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–µ')
async def show_tasks_month(message: types.Message):
    category_id = 30  
    async with async_session() as session:
        result = await session.execute(select(Task).where(Task.category_id == category_id))
        tasks = result.scalars().all()
        if tasks:
            response = ''
            for task in tasks:
                response += f" {task.description} | –û—á–∫–∏: {task.point}\n\n"
            await message.answer(response)
        else:
            await message.answer("–ó–∞–¥–∞—á—å –ø–æ–∫–∞ –Ω–µ—Ç.–ü—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ")

@router.message(F.text == '–õ–∏–¥–µ—Ä–±–æ—Ä–¥')
async def show_top_users(message: types.Message):
    async with async_session() as session:
        result = await session.execute(select(User).order_by(desc(User.all_point)).limit(10))
        users = result.scalars().all()
        if users:
            response = '–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º:\n\n'
            for i, user in enumerate(users, start=1):
                response += f"{i} | {user.name} | {user.all_point} –æ—á–∫–æ–≤\n"
            await message.answer(response)
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")