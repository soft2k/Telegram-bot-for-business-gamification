import asyncio
from typing import List
from aiogram import Bot, Dispatcher, types,Router,F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
 
from aiogram.types import InlineKeyboardButton,InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import re
from sqlalchemy import select,desc
from app.database.models import async_session
from app.database.models import User,Task,Shop,Confirm
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.orm import sessionmaker, declarative_base
import app.database.models as md
import app.database.requests as rq
import app.keybord as kb
import app.root as rt

router = Router()


class ConfrimDay(StatesGroup):
    waiting_for_confrim = State

class RegisterStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_phone_referals = State()


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        result = await session.execute(
            select(User).where(User.tg_id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}!",reply_markup=kb.main)
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            await state.set_state(RegisterStates.waiting_for_name)

@router.message(RegisterStates.waiting_for_name)
async def cmd_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        text='–¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º',
        reply_markup=kb.phone_kb
    )
    await state.set_state(RegisterStates.waiting_for_phone)

@router.message(RegisterStates.waiting_for_phone)
async def cmd_phone(message: types.Message, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if message.contact:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        phone = message.contact.phone_number
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é
        phone = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(phone=phone)

    try:
        await message.answer(
            text='–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –¥—Ä—É–≥–∞ –∏ –µ–º—É –ø—Ä–∏–¥—É—Ç –±–æ–Ω—É—Å—ã)',
            reply_markup=kb.referals
        )
        await state.set_state(RegisterStates.waiting_for_phone_referals)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(RegisterStates.waiting_for_phone_referals)
async def processing_registr(message: types.Message, state: FSMContext):
    referral_phone = message.text
    state_data = await state.get_data()
    name = state_data.get('name')
    phone = state_data.get('phone')  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ —Ç–µ–ª–µ—Ñ–æ–Ω

    async with async_session() as session:
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                tg_id=message.from_user.id,
                name=name,
                phone=phone  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
            )
            session.add(new_user)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            if referral_phone:
                referral = await session.scalar(
                    select(User).where(User.phone == referral_phone)
                )
                if referral:
                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã —Ä–µ—Ñ–µ—Ä–∞–ª—É
                    referral.point += 100
                    referral.all_point += 100

            await session.commit()
            
            await message.answer(
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                reply_markup=kb.main
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")  # –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            await session.rollback()
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        
        finally:
            await state.clear()



@router.message(F.text == '–ù–∞–∑–∞–¥')
async def send_welcome(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—Ö–æ–¥–∫–∞–ë–æ—Ç!",reply_markup=kb.main)


    
#–•–µ–Ω–¥–ª–µ—Ä—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.message(F.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def my_profile(message: types.Message):
    user_info = await rq.profile(message.from_user.id)

    await message.answer(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"–¢–≤–æ–π ID: {user_info['id']}\n"
            f"–ò–º—è: {user_info['name']}\n"
            f"–ë–∞–ª–∞–Ω—Å: {user_info['points']}\n"
            f"–í—Å–µ–≥–æ –æ—á–∫–æ–≤: {user_info['all_point']}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: {user_info['tasks']}\n"
            f"–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {user_info['level']}\n"
           
             
              ,reply_markup=kb.main)


@router.message(F.text == '–ó–∞–¥–∞–Ω–∏–µ')
async def my_profile(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏–π',reply_markup=kb.task)




async def get_tasks():
    async with async_session() as session:
        result = await session.execute(select(Task).where(Task.id == 1))
        tasks = result.scalars().all()
        return tasks



@router.message(F.text == '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–µ')
async def show_tasks(message: types.Message):
    async with async_session() as session:
        
        result = await session.execute(select(Task).where(Task.category_id == 1))
        tasks = result.scalars().all()


    if not tasks:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    builder = InlineKeyboardBuilder()
    for task in tasks:
        builder.button(text=f"{task.description} | {task.point}", callback_data=f"task_{task.id}")
    
    builder.adjust(1)  

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=builder.as_markup())

    



@router.message(F.text == '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–µ')
async def show_tasks(message: types.Message):
    async with async_session() as session:
        
        result = await session.execute(select(Task).where(Task.category_id == 7))
        tasks = result.scalars().all()


    if not tasks:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    builder = InlineKeyboardBuilder()
    for task in tasks:
        builder.button(text=f"{task.description} | {task.point}", callback_data=f"task_{task.id}")
    
    builder.adjust(1)  

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=builder.as_markup())



@router.message(F.text == '–ï–∂–µ–º–µ—Å–µ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–µ')
async def show_tasks(message: types.Message):
    async with async_session() as session:
        
        result = await session.execute(select(Task).where(Task.category_id == 30))
        tasks = result.scalars().all()


    if not tasks:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    builder = InlineKeyboardBuilder()
    for task in tasks:
        builder.button(text=f"{task.description} | {task.point}", callback_data=f"task_{task.id}")
    
    builder.adjust(1)  

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=builder.as_markup())



@router.callback_query(F.data.startswith("task_"))
async def process_task_selection(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        result = await session.execute(select(Task).filter(Task.id == task_id))
        task = result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_result = await session.execute(
            select(User).filter(User.tg_id == callback_query.from_user.id)
        )
        user = user_result.scalar_one_or_none()
        
        if task and user:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ task
            task_description = task.description
            task_point = task.point

            new_confirm = Confirm(
                tg_id=callback_query.from_user.id,
                name=user.name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                description=task_description,
                points=task_point
            )
            session.add(new_confirm)
            await session.commit()

            await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ: {task_description}")
            await callback_query.message.answer(f"–ó–∞–¥–∞–Ω–∏–µ '{task_description}' ({task_point} points) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            await callback_query.answer("–ó–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


@router.message(F.text == '–õ–∏–¥–µ—Ä–±–æ—Ä–¥')
async def show_top_users(message: types.Message):
    async with async_session() as session:
        result = await session.execute(select(User).order_by(desc(User.all_point)).limit(10))
        users = result.scalars().all()
        if users:
            response = '–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º:\n\n'
            for i, user in enumerate(users, start=1):
                response += f"{i} | {user.name} | {user.all_point} –æ—á–∫–æ–≤\n"
            await message.answer(response)
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")



#–ú–∞–≥–∞–∑–∏–Ω
@router.message(F.text == '–ú–∞–≥–∞–∑–∏–Ω')
async def show_shop(message: types.Message):
    async with async_session() as session:
        
        result = await session.execute(select(Shop))
        shops = result.scalars().all()


    if not shops:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è –Ω–∏—á–µ–≥–æ –∫—É–ø–∏—Ç—å.")
        return

    builder = InlineKeyboardBuilder()
    for shop in shops:
        builder.button(text=f"{shop.description} | {shop.points}", callback_data=f"shop_{shop.id}")

    builder.adjust(1)  
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("shop_"))
async def process_shop_purchase(callback: types.CallbackQuery):
    shop_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    async with async_session() as session:
        async with session.begin():
            shop_item = await session.execute(select(Shop).where(Shop.id == shop_id))
            shop_item = shop_item.scalar_one_or_none()

            if not shop_item:
                await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            user = await session.execute(select(User).where(User.tg_id == user_id))
            user = user.scalar_one_or_none()

            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            if user.point >= shop_item.points:
                user.point -= shop_item.points
            
                await callback.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {shop_item.description}! –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ê–¥–º–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!")
                
                await callback.answer()
            else:
                await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")

        
